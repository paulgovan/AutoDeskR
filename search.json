[{"path":"http://paulgovan.github.io/AutoDeskR/articles/Authentication.html","id":"authentication","dir":"Articles","previous_headings":"","what":"Authentication","title":"Authentication","text":"AutoDesk uses OAuth-based authentication access services. get started package, first visit Create App tutorial instructions creating app getting Client ID Secret. highly recommend Client ID, Secret, access tokens stored file called .Renviron accessing keys Sys.getenv() function. step possible solution preventing authentication information publicly accessible location (e.g. GitHub repo). information storing keys .Renviron file accessing Sys.getenv(), see appendix API Best Practices vignette. get access token, use getToken() function, returns object access_token, type, expires_in variables.:","code":"resp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\")) myToken <- resp$content$access_token"},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Data-Management.html","id":"data-management","dir":"Articles","previous_headings":"","what":"Data Management","title":"Data-Management","text":"Data Management API provides users way store access data across Forge Platform.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Data-Management.html","id":"create-a-bucket-and-upload-a-file","dir":"Articles","previous_headings":"Data Management","what":"Create a Bucket and Upload a File","title":"Data-Management","text":"create bucket, first get token bucket:create, bucket:read, data:write scopes. use makeBucket() function create bucket, bucket name bucket. check status bucket: Finally, upload file bucket, use uploadFile() function, returns object containing bucketKey, objectId (.e. urn), objectKey (.e. file name), size, contentType (.e. “application/octet-stream”), location content information. Note unique urn file store .Renviron future use.","code":"resp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"),              scope = \"bucket:create bucket:read data:write\") myToken <- resp$content$access_token resp <- makeBucket(token = myToken, bucket = \"mybucket\") resp <- checkBucket(token = myToken, bucket = \"mybucket\") resp resp <- uploadFile(file = system.file(\"samples/aerial.dwg\", package = \"AutoDeskR\"),             token = myToken, bucket = \"mybucket\") myUrn <- resp$content$objectId"},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Design-Automation.html","id":"design-automation","dir":"Articles","previous_headings":"","what":"Design Automation","title":"Design-Automation","text":"Design Automation API provides users ability perform automated tasks design files cloud.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Design-Automation.html","id":"convert-a-dwg-file-to-a-pdf-file","dir":"Articles","previous_headings":"Design Automation","what":"Convert a DWG File to a PDF File","title":"Design-Automation","text":"convert DWG file PDF file, use makePdf function, source destination publicly accessible source DWG file destination PDF file, respectively. Note example, token must generated code:scope. check status conversion process:","code":"mySource <- \"http://download.autodesk.com/us/samplefiles/acad/visualization_-_aerial.dwg\" myDestination <- \"https://drive.google.com/folderview?id=0BygncDVHf60mTDZVNDltLThLNmM&usp=sharing\" resp <- makePdf(source = mySource, destination = myDestination, token = myToken) resp <- checkPdf(source = mySource, destination = myDestination, token = myToken) resp"},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Model-Derivative.html","id":"model-derivative","dir":"Articles","previous_headings":"","what":"Model Derivative","title":"Model-Derivative","text":"Model Derivative API enables users translate designs different formats extract valuable data.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Model-Derivative.html","id":"translate-a-file-into-obj-format","dir":"Articles","previous_headings":"Model Derivative","what":"Translate a File into OBJ Format","title":"Model-Derivative","text":"translate supported file OBJ format, first get access token data:read data:write scopes. Note certain types files can translated OBJ format. find types files can translated format, see Supported Translation Formats Table. platform requires urn file Base-64 encoded. Fortunately, jsonlite package nifty function encoding urn. , translate file OBJ format: check status translation process: download OBJ file locally, need output urn translated file, different urn source file. case, use getOutputUrn() function, returns object containing result, output urn activity information. Depending type file translation process, response may contain multiple output urns different file types (e.g. obj, svf, png). order find correct OBJ file, look resp object urn ends “.obj” assign urn myOutputUrn, look similar following: Finally, download OBJ file locally:","code":"resp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"),              scope = \"data:read data:write\") myToken <- resp$content$access_token # Here myUrn was generated from the 'uploadFile()' function myEncodedUrn <- jsonlite::base64_enc(myUrn) resp <- translateObj(urn = myEncodedUrn, token = myToken) resp <- checkFile(urn = myEncodedUrn, token = myToken) resp resp <- getOutputUrn(urn = myUrn, token = Sys.getenv(\"token\")) resp myOutputUrn < \"urn:adsk.viewing:fs.file:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWxkZXJpdmF0aXZlL0E1LmlhbQ/output/geometry/bc3339b2-73cd-4fba-9cb3-15363703a354.obj\" myEncodedOutputUrn = jsonlite::base64_enc(myOutputUrn) resp <- downloadFile(urn = myEncodedUrn, output_urn <- myEncodedOutputUrn, token = myToken)"},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Troubleshooting.html","id":"common-issues","dir":"Articles","previous_headings":"","what":"Common Issues","title":"Troubleshooting","text":"running list common issues users run : Problem: functions seem work, others don’t. Solution: Make sure sign correct APIs services AutoDesk Forge. Problem: can’t create bucket “mybucket”. Solution: Try unique bucket name. Problem: able create bucket upload file, can’t translate file. Solution: task requires different tokens different scopes. Make sure create token “data:read data:write” scopes order translate file.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Viewer.html","id":"prepare-a-file-for-the-viewer","dir":"Articles","previous_headings":"","what":"Prepare a File for the Viewer","title":"Viewer","text":"prepare file online viewer, first get access token data:read data:write scopes. Nex, encode urn using jsonlite::base64_enc() function. , translate file SVF format: check status translation process: Finally, embed urn file viewer, described Viewer section.","code":"resp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"),              scope = \"data:read data:write\") myToken <- resp$content$access_token myEncodedUrn <- jsonlite::base64_enc(myUrn) resp <- translateSvf(urn = myEncodedUrn, token = myToken) resp <- checkFile(urn = myEncodedUrn, token = myToken) resp"},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Viewer.html","id":"extract-data-from-a-file","dir":"Articles","previous_headings":"","what":"Extract Data from a File","title":"Viewer","text":"extract data file, follow steps previous section getting token data:read data:write scopes, encoding urn file using jsonlite::base64_enc() function, translating file SVF format using translateSvf() function. Next, retrieve metadata file using getMetadata() function, returns object type, name, guid file. Note guid store .Renviron. get object tree model, use getObjectTree() function. extract data model, use getData() function.","code":"resp <- getMetadata(urn = myEncodedUrn, token = myToken) myGuid <- resp$content$data$metadata[[1]]$guid resp <- getObjectTree(guid = myGuid, urn = myEncodedUrn, token = myToken) resp resp <- getData(guid = myGuid, urn = myEncodedUrn, token = myToken)"},{"path":"http://paulgovan.github.io/AutoDeskR/articles/Viewer.html","id":"viewer","dir":"Articles","previous_headings":"","what":"Viewer","title":"Viewer","text":"AutoDesk provides WebGL-based viewer rendering 2D 3D models. use viewer, make sure first follow instructions Prepare File Viewer . simply pass urn file token viewer3D() function:  viewer can also embedded Shiny applications, interactive R markdown documents, web pages thanks Shiny Modules framework. simple example Shiny app viewerUI() function:","code":"viewer3D(urn = myEncodedUrn, token = myToken) ui <- function(request) {  shiny::fluidPage(    viewerUI(\"pg\", myEncodedUrn, myToken)  ) } server <- function(input, output, session) { } shiny::shinyApp(ui, server)"},{"path":"http://paulgovan.github.io/AutoDeskR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Govan. Author, maintainer, copyright holder.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Govan P (2023). AutoDeskR: Interface 'AutoDesk' 'API' Platform. https://github.com/paulgovan/autodeskr, http://paulgovan.github.io/AutoDeskR/.","code":"@Manual{,   title = {AutoDeskR: An Interface to the 'AutoDesk' 'API' Platform},   author = {Paul Govan},   year = {2023},   note = {https://github.com/paulgovan/autodeskr, http://paulgovan.github.io/AutoDeskR/}, }"},{"path":"http://paulgovan.github.io/AutoDeskR/index.html","id":"introduction","dir":"","previous_headings":"","what":"An Interface to the AutoDesk API Platform","title":"An Interface to the AutoDesk API Platform","text":"AutoDeskR R package provides interface : Authentication API obtaining authentication AutoDesk Forge Platfrom. Data Management API managing data across platform’s cloud services. Design Automation API performing automated tasks model files cloud. Model Derivative API translating design files different formats, sending viewer app, extracting model data. Viewer rendering 2D 3D models.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"An Interface to the AutoDesk API Platform","text":"install AutoDeskR R: install development version:","code":"install.packages(\"AutoDeskR\") devtools::install_github('paulgovan/autodeskr')"},{"path":"http://paulgovan.github.io/AutoDeskR/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"An Interface to the AutoDesk API Platform","text":"Many thanks developers AutoDesk providing great set tools support needed learn implement APIs.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkBucket.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the Status of an App-Managed Bucket. — checkBucket","title":"Check the Status of an App-Managed Bucket. — checkBucket","text":"Check status recently created app-managed bucket using Data Management API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkBucket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the Status of an App-Managed Bucket. — checkBucket","text":"","code":"checkBucket(token = NULL, bucket = \"mybucket\")"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkBucket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the Status of an App-Managed Bucket. — checkBucket","text":"token string. Token generated getToken function bucket:create, bucket:read, data:write scopes. bucket string. Name bucket. Defaults mybucket.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkBucket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the Status of an App-Managed Bucket. — checkBucket","text":"object containing bucketKey, bucketOwner,  createdDate.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkBucket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the Status of an App-Managed Bucket. — checkBucket","text":"","code":"if (FALSE) { # Check the status of a bucket with the name \"mybucket\" resp <- checkBucket(token = myToken, bucket = \"mybucket\") resp }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the Status of a Translated File. — checkFile","title":"Check the Status of a Translated File. — checkFile","text":"Check status recently translated file using Model Derivative API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the Status of a Translated File. — checkFile","text":"","code":"checkFile(urn = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the Status of a Translated File. — checkFile","text":"urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read data:write scopes.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the Status of a Translated File. — checkFile","text":"","code":"if (FALSE) { # Check the status of the translated \"aerial.dwg\" svf file resp <- checkFile(urn = myEncodedUrn, token = myToken) resp }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkPdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the status of a PDF. — checkPdf","title":"Check the status of a PDF. — checkPdf","text":"Check status recently created PDF file using Design Automation API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkPdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the status of a PDF. — checkPdf","text":"","code":"checkPdf(source = NULL, destination = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkPdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the status of a PDF. — checkPdf","text":"source string. Publicly accessible web address input dwg file. destination string. Publicly accessible web address output pdf file. token string. Token generated getToken function code:scope.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/checkPdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the status of a PDF. — checkPdf","text":"","code":"if (FALSE) { mySource <- \"http://download.autodesk.com/us/samplefiles/acad/visualization_-_aerial.dwg\" myDestination <- \"https://drive.google.com/folderview?id=0BygncDVHf60mTDZVNDltLThLNmM&usp=sharing\" resp <- checkPdf(mySource, myDestination, token = myToken) resp }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/downloadFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a file locally. — downloadFile","title":"Download a file locally. — downloadFile","text":"Download file Forge Platform using Model Derivative API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/downloadFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a file locally. — downloadFile","text":"","code":"downloadFile(urn = NULL, output_urn = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/downloadFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a file locally. — downloadFile","text":"urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. output_urn string. Output_urn retrieved via getOutputUrn token string. Token generated getToken function data:read data:write scopes.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/downloadFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a file locally. — downloadFile","text":"object containing result, urn, additional   activity information.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/downloadFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a file locally. — downloadFile","text":"","code":"if (FALSE) { # Download the \"aerial.dwg\" png file myEncodedOutputUrn <- jsonlite::base64_enc(myOutputUrn) resp <- downloadFile(urn <- myEncodedUrn, output_urn <- myEncodedOutputUrn, token = myToken) }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Geometry Data for a File. — getData","title":"Get the Geometry Data for a File. — getData","text":"Get geometry uploaded file using Model Derivative API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Geometry Data for a File. — getData","text":"","code":"getData(guid = NULL, urn = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Geometry Data for a File. — getData","text":"guid string. GUID retrieved via getMetadata function. urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read data:write scopes.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Geometry Data for a File. — getData","text":"object containing geometry data selected file.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Geometry Data for a File. — getData","text":"","code":"if (FALSE) { # Get the geometry data for the \"aerial.dwg\" svf file resp <- getData(guid <- myGuid, urn <- myEncodedUrn, token = myToken) }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Metadata for a File. — getMetadata","title":"Get the Metadata for a File. — getMetadata","text":"Get metadata uploaded file using Model Derivative API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Metadata for a File. — getMetadata","text":"","code":"getMetadata(urn = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Metadata for a File. — getMetadata","text":"urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read data:write scopes.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Metadata for a File. — getMetadata","text":"object containing type, name, guid   file.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getMetadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Metadata for a File. — getMetadata","text":"","code":"if (FALSE) { # Get the metadata for the \"aerial.dwg\" svf file resp <- getMetadata(urn <- myEncodedUrn, token = myToken) myGuid <- resp$content$data$metadata[[1]]$guid }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getObjectTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Object Tree of a File. — getObjectTree","title":"Get the Object Tree of a File. — getObjectTree","text":"Get object tree uploaded file using Model Derivative API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getObjectTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Object Tree of a File. — getObjectTree","text":"","code":"getObjectTree(guid = NULL, urn = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getObjectTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Object Tree of a File. — getObjectTree","text":"guid string. GUID retrieved via getMetadata function. urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read data:write scopes.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getObjectTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Object Tree of a File. — getObjectTree","text":"object containing object tree selected file. file.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getObjectTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Object Tree of a File. — getObjectTree","text":"","code":"if (FALSE) { # Get the object tree for the \"aerial.dwg\" svf file resp <- getObjectTree(guid <- myGuid, urn <- myEncodedUrn, token = myToken) resp }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getOutputUrn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Output URN for a File. — getOutputUrn","title":"Get the Output URN for a File. — getOutputUrn","text":"Get output urn translated file using Model Derivative API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getOutputUrn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Output URN for a File. — getOutputUrn","text":"","code":"getOutputUrn(urn, token)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getOutputUrn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Output URN for a File. — getOutputUrn","text":"urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read data:write scopes.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getOutputUrn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Output URN for a File. — getOutputUrn","text":"object containing result, urn, additional   activity information.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getOutputUrn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Output URN for a File. — getOutputUrn","text":"","code":"if (FALSE) { # Get the output urn for the \"aerial.dwg\" obj file resp <- getOutputUrn(urn <- myUrn, token = Sys.getenv(\"token\")) resp }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a 2-Legged Token for Authentication. — getToken","title":"Get a 2-Legged Token for Authentication. — getToken","text":"Get 2-legged token OAuth-based authentication AutoDesk Forge Platform.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getToken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a 2-Legged Token for Authentication. — getToken","text":"","code":"getToken(id = NULL, secret = NULL, scope = \"data:write data:read\")"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a 2-Legged Token for Authentication. — getToken","text":"id string. Client ID app generated AutoDesk Dev Portal. secret string. Client Secret app generated AutoDesk Dev Portal. scope string. Space-separated list required scopes. May user-profile:read, data:read, data:write, data:create, data:search, bucket:create, bucket:read, bucket:update, bucket:delete, code:, account:read, account:write, combination .","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getToken.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a 2-Legged Token for Authentication. — getToken","text":"object containing access_token, code_type,  expires_in milliseconds.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/getToken.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a 2-Legged Token for Authentication. — getToken","text":"","code":"if (FALSE) { # Get a 2-legged token with the \"data:read\" and \"data:write\" scopes resp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"),            scope = \"data:write data:read\") myToken <- resp$content$access_token }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makeBucket.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Bucket for an App. — makeBucket","title":"Make a Bucket for an App. — makeBucket","text":"Make app-based bucket storage design files using Data Management API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makeBucket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Bucket for an App. — makeBucket","text":"","code":"makeBucket(token = NULL, bucket = \"mybucket\", policy = \"transient\")"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makeBucket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Bucket for an App. — makeBucket","text":"token string. Token generated getToken function bucket:create, bucket:read, data:write scopes. bucket string. Unique bucket name. Defaults mybucket. policy string. May transient, temporary, persistent.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makeBucket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Bucket for an App. — makeBucket","text":"object containing bucketKey, bucketOwner,  createdDate.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makeBucket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Bucket for an App. — makeBucket","text":"","code":"if (FALSE) { # Make a transient bucket with the name \"mybucket\" resp <- makeBucket(token = myToken, bucket = \"mybucket\", policy = \"transient\") }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makePdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a DWG to a PDF. — makePdf","title":"Convert a DWG to a PDF. — makePdf","text":"Convert publicly accessible DWG file publicly accessible PDF using Design Automation API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makePdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a DWG to a PDF. — makePdf","text":"","code":"makePdf(source = NULL, destination = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makePdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a DWG to a PDF. — makePdf","text":"source string. Publicly accessible web address input dwg file. destination string. Publicly accessible web address output pdf file. token string. Token generated getToken function code:scope.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/makePdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a DWG to a PDF. — makePdf","text":"","code":"if (FALSE) { mySource <- \"http://download.autodesk.com/us/samplefiles/acad/visualization_-_aerial.dwg\" myDestination <- \"https://drive.google.com/folderview?id=0BygncDVHf60mTDZVNDltLThLNmM&usp=sharing\" resp <- makePdf(mySource, myDestination, token = myToken) }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateObj.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate a File into OBJ Format. — translateObj","title":"Translate a File into OBJ Format. — translateObj","text":"Translate uploaded file OBJ format using Model Derivative API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate a File into OBJ Format. — translateObj","text":"","code":"translateObj(urn = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate a File into OBJ Format. — translateObj","text":"urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read data:write scopes.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate a File into OBJ Format. — translateObj","text":"object containing result, urn, additional   activity information.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate a File into OBJ Format. — translateObj","text":"","code":"if (FALSE) { # Translate the \"aerial.dwg\" file into a obj file resp <- translateObj(urn <- myEncodedUrn, token = myToken) }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateSvf.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate a File into SVF Format. — translateSvf","title":"Translate a File into SVF Format. — translateSvf","text":"Translate uploaded file SVF format using Model Derivative API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateSvf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate a File into SVF Format. — translateSvf","text":"","code":"translateSvf(urn = NULL, token = NULL)"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateSvf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate a File into SVF Format. — translateSvf","text":"urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read data:write scopes.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateSvf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate a File into SVF Format. — translateSvf","text":"object containing result, urn, additional   activity information.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/translateSvf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate a File into SVF Format. — translateSvf","text":"","code":"if (FALSE) { # Translate the \"aerial.dwg\" file into a svf file myEncodedUrn <- jsonlite::base64_enc(myUrn) resp <- translateSvf(urn = myEncodedUrn, token = myToken) }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/uploadFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload a File to an App-Managed Bucket. — uploadFile","title":"Upload a File to an App-Managed Bucket. — uploadFile","text":"Upload design file app-managed bucket using Data Management API.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/uploadFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload a File to an App-Managed Bucket. — uploadFile","text":"","code":"uploadFile(file = NULL, token = NULL, bucket = \"mybucket\")"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/uploadFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload a File to an App-Managed Bucket. — uploadFile","text":"file string. File path. token string. Token generated getToken function bucket:create, bucket:read, data:write scopes. bucket string. Unique bucket name. Defaults mybucket.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/uploadFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload a File to an App-Managed Bucket. — uploadFile","text":"object containing bucketKey, objectId (.e.   urn), objectKey (.e. file name), size, contentType (.e. \"application/octet-stream\"), location. content   information.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/uploadFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload a File to an App-Managed Bucket. — uploadFile","text":"","code":"if (FALSE) { # Upload the \"aerial.dwg\" file to \"mybucket\" resp <- uploadFile(file = system.file(\"inst/samples/aerial.dwg\", package = \"AutoDeskR\"),            token = myToken, bucket = \"mybucket\") myUrn <- resp$content$objectId }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/viewer3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the Viewer. — viewer3D","title":"Launch the Viewer. — viewer3D","text":"Launch Viewer.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/viewer3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the Viewer. — viewer3D","text":"","code":"viewer3D(urn = NULL, token = NULL, viewerType = \"header\")"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/viewer3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch the Viewer. — viewer3D","text":"urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read scope. viewerType string. type viewer instantiate. Either \"header\" default viewer, \"headless\" viewer without toolbar panels, \"vr\" enter WebVR mode mobile device.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/viewer3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch the Viewer. — viewer3D","text":"","code":"if (FALSE) { # View the \"aerial.dwg\" file in the AutoDesk viewer myEncodedUrn <- jsonlite::base64_enc(myUrn) viewer3D(urn <- myEncodedUrn, token = myToken) }"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/viewerUI.html","id":null,"dir":"Reference","previous_headings":"","what":"UI Module Function. — viewerUI","title":"UI Module Function. — viewerUI","text":"UI Module Function.","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/reference/viewerUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI Module Function. — viewerUI","text":"","code":"viewerUI(id, urn = NULL, token = NULL, viewerType = \"header\")"},{"path":"http://paulgovan.github.io/AutoDeskR/reference/viewerUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI Module Function. — viewerUI","text":"id string. namespace module. urn string. Source URN (objectId) file. Note URN must Base64 encoded. encode URN, see, example, jsonlite::base64_enc function. token string. Token generated getToken function data:read scope. viewerType string. type viewer instantiate. Either \"header\" default viewer \"headless\" viewer without toolbar panels.","code":""},{"path":[]},{"path":"http://paulgovan.github.io/AutoDeskR/reference/viewerUI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UI Module Function. — viewerUI","text":"","code":"if (FALSE) { ui <- function(request) {  shiny::fluidPage(    viewerUI(\"pg\", myEncodedUrn, myToken)  ) } server <- function(input, output, session) { } shiny::shinyApp(ui, server) }"},{"path":"http://paulgovan.github.io/AutoDeskR/news/index.html","id":"autodeskr-013","dir":"Changelog","previous_headings":"","what":"AutoDeskR 0.1.3","title":"AutoDeskR 0.1.3","text":"CRAN release: 2017-07-09","code":""},{"path":"http://paulgovan.github.io/AutoDeskR/news/index.html","id":"major-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"AutoDeskR 0.1.3","text":"WebVR support","code":""}]
